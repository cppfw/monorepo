name: ci
on:
  push: {branches-ignore: [latest], tags: ['*']}
  pull_request:
jobs:
##### deb linux #####
  deb:
    strategy:
      fail-fast: false
      matrix:
        config:
          - Debug
          - Release
        include:
          # - {os: debian, codename: bullseye, image_owner: }
          # - {os: debian, codename: bullseye, image_owner: , labels: [i386,docker]}
          # - {os: debian, codename: bullseye, image_owner: , labels: [arm32,docker]}
          # - {os: debian, codename: bullseye, image_owner: , labels: [arm64,docker]}
        #   - {os: debian, codename: bookworm, image_owner: }
        #   - {os: debian, codename: bookworm, image_owner: arm32v7/, labels: [ubuntu-24.04-arm]}
        #   - {os: debian, codename: bookworm, image_owner: arm64v8/, labels: [ubuntu-24.04-arm]}
          - {os: debian, codename: trixie, image_owner: }
        #   - {os: debian, codename: trixie, image_owner: arm32v7/, labels: [ubuntu-24.04-arm]}
          - {os: debian, codename: trixie, image_owner: arm64v8/, labels: [ubuntu-24.04-arm]}
          # - {os: ubuntu, codename: focal, image_owner: }
          # - {os: ubuntu, codename: jammy, image_owner: }
        #   - {os: ubuntu, codename: noble, image_owner: }
          # - {os: raspbian, codename: buster, image_owner: igagis/, labels: [arm32,docker]}
          # - {os: raspbian, codename: bullseye, image_owner: igagis/, labels: [arm32,docker]}
          # - {os: raspbian, codename: bookworm, image_owner: igagis/, labels: [ubuntu-24.04-arm]}
    runs-on: ${{ (matrix.labels == '' && 'ubuntu-latest') || matrix.labels }}
    container: ${{ matrix.image_owner }}${{ matrix.os }}:${{ matrix.codename }}
    name: linux - ${{ matrix.image_owner }}${{ matrix.os }}:${{ matrix.codename }}
    steps:
      - name: install build tools
        run: |
          apt --quiet update --yes
          apt --quiet install --yes build-essential cmake pkg-config git curl zip unzip tar
      - name: install build deps
        run: |
          apt --quiet install --yes libxmu-dev libxi-dev libgl-dev libgles-dev libgtk-3-dev
      - name: git clone
        uses: myci-actions/checkout@main
        with:
          submodules: true #  non-recursive, no remote
      - name: install vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git vcpkg-installation
          (cd vcpkg-installation; ./bootstrap-vcpkg.sh)
      - name: set VCPKG_ROOT
        uses: myci-actions/export-env-var@main
        with: {name: VCPKG_ROOT, value: "$(pwd)/vcpkg-installation"}
      - name: add VCPKG_ROOT to PATH
        uses: myci-actions/export-env-var@main
        with: {name: PATH, value: "$PATH:$VCPKG_ROOT"}
      - name: generate cmake build files
        run: |
          ls $VCPKG_ROOT
          ls $VCPKG_ROOT/scripts/
          ls $VCPKG_ROOT/scripts/buildsystems/
          mkdir out
          cd out
          cmake ../build/cmake
      - name: build
        run: |
          cd out
          cmake --build . --parallel --config ${{ matrix.config }}
      - name: test
        run: |
          cd out
          cmake --build . --config ${{ matrix.config }} --target test
##### macosx #####
  macosx:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - Debug
          - Release
    steps:
    - name: workaround python2 and python3 issue when upgrading python
      run : |
        rm -rf /usr/local/bin/2to3*
        rm -rf /usr/local/bin/idle3*
        rm -rf /usr/local/bin/pydoc3*
        rm -rf /usr/local/bin/python3
        rm -rf /usr/local/bin/python3-config
        rm -rf /usr/local/bin/python3*
        rm -rf /usr/local/bin/python3*-config
    - name: git clone
      uses: myci-actions/checkout@main
      with:
        submodules: true #  non-recursive, no remote
    - name: install vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git vcpkg-installation
        (cd vcpkg-installation; ./bootstrap-vcpkg.sh)
    - name: set VCPKG_ROOT
      uses: myci-actions/export-env-var@main
      with: {name: VCPKG_ROOT, value: "$(pwd)/vcpkg-installation"}
    - name: add VCPKG_ROOT to PATH
      uses: myci-actions/export-env-var@main
      with: {name: PATH, value: "$PATH:$VCPKG_ROOT"}
    - name: install ci tools
      run: brew install cmake
    - name: generate cmake build files
      run: |
        mkdir out
        cd out
        cmake ../build/cmake
    - name: build
      run: |
        cd out
        cmake --build . --parallel --config ${{ matrix.config }}
    - name: test
      run: |
        cd out
        cmake --build . --config ${{ matrix.config }} --target test
##### windows #####
  windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: powershell
    strategy:
      fail-fast: false
      matrix:
        config:
          - Debug
          - Release
        arch:
          - Win32
          - x64
    name: windows
    steps:
    - name: git clone
      uses: actions/checkout@v4
      with:
        submodules: true #  non-recursive, no remote
    - name: set VCPKG_ROOT
      uses: myci-actions/export-env-var-powershell@main
      # accorging to github actions windows image docs, it should define VCPKG_INSTALLATION_ROOT env var,
      # but on practice it is not set, so specify vcpkg root path explicitly
      with: {name: VCPKG_ROOT, value: "C:/vcpkg/"}
    - name: generate cmake build files
      run: |
        mkdir out
        cd out
        cmake -A ${{ matrix.arch }} ../build/cmake
    - name: build
      run: |
        cd out
        cmake --build . --parallel --config ${{ matrix.config }}
    - name: test
      run: |
          cd out
          cmake --build . --config ${{ matrix.config }} --target test
